Problem Description :- (Leetcode Medium)
-----------------------------------------
Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.
You must do it in place.

Example 1:
Input: matrix = [[1,1,1],
                 [1,0,1],
                 [1,1,1]]
Output: [[1,0,1],
         [0,0,0],
         [1,0,1]]
Example 2:
Input: matrix = [[0,1,2,0],
                 [3,4,5,2],
                 [1,3,1,5]]
Output: [[0,0,0,0],
         [0,4,5,0],
         [0,3,1,0]]

Solution :- 
***********************************************************************************
Brute Force Approach - (Time Complexity : O(n+m)* n * m)), Space Complexity : O(1))
***********************************************************************************
#include<bits/stdc++.h>
using namespace std;

class solution{
public:
    void markrow(vector<vector<int>> & matrix, int n, int m, int i){
        for(int j = 0; j < n; j++){
            if(matrix[i][j] != 0){
                matrix[i][j] = -1;
            }
        }
    }
    void markcol(vector<vector<int>> & matrix, int n, int m, int j){
        for(int i = 0; i < m; i++){
            if(matrix[i][j] != 0){
                matrix[i][j] = -1;
            }
        }
    }
    void setmatrixzero(vector<vector<int>> &matrix){
        int n = matrix.size();
        int m = matrix[0].size();
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(matrix[i][j] == 0){
                    markrow(matrix,n,m,i);
                    markcol(matrix,n,m,j);
                }
            }
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(matrix[i][j] == -1){
                    matrix[i][j] = 0;
                }
            }
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                cout<<matrix[i][j]<<" ";
            }
            cout<<endl;
        }
    }
    
};

int main(){
    int n, m;
    cout<<"Enter row size : "<<endl;
    cin>>n;
    cout<<"Enter col size : "<<endl;
    cin>>m;
    
    vector<vector<int>> matrix(n,vector<int>(m));
    cout<<"Enter the matrix : "endl; 
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            cin>>matrix[i][j];
        }
    }
    solution* obj = new solution();
    obj->setmatrixzero(matrix);
    
    return 0;
}
********************************************************************************************
Better Approach than Brute Force - (Time Complexity : O(n * m), Space Complexity : O(n + m))
********************************************************************************************
#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int row_size = matrix.size();
        int col_size = matrix[0].size();
        vector<int> row(row_size, 0);
        vector<int> col(col_size, 0); 

        for(int i = 0; i < row_size; i++){
            for(int j = 0; j < col_size; j++){
                if(matrix[i][j] == 0){
                    row[i] = -1;
                    col[j] = -1;
                }
            }
        }
        for(int i = 0; i < row_size; i++){
            for(int j = 0; j < col_size; j++){
                if(row[i] == -1 || col[j] == -1){
                    matrix[i][j] = 0;
                }
            }
        }
    }
};
int main(){
    int n, m;
    cout<<"Enter row size : "<<endl;
    cin>>n;
    cout<<"Enter col size : "<<endl;
    cin>>m;
    
    vector<vector<int>> matrix(n,vector<int>(m));
    cout<<"Enter the matrix : "endl; 
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            cin>>matrix[i][j];
        }
    }
    vector<vector<int>> ans = setZeros(matrix);

    for(auto it : ans){
        for(auto ele : it){
            cout<<ele<<" ";
         }
         cout<<endl;
     }
     return 0;
}
************************************************************************************
Optimal Approach - (Time Complexity : O(n * m), Space Complexity : O(1))
*************************************************************************************
#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int row_size = matrix.size();
        int col_size = matrix[0].size();
        //vector<int> row(row_size, 0); //vector<int> col(col_size, 0); 
        int col0 = 1;
        for(int i = 0; i < row_size; i++){
            for(int j = 0; j < col_size; j++){
                if(matrix[i][j] == 0){
                    //row[i] = -1; //col[j] = -1;
                    matrix[i][0] = 0;
                    if(j != 0){
                        matrix[0][j] = 0;
                    }else{
                        col0 = 0;
                    }
                }
            }
        }
        for(int i = 1; i < row_size; i++){
            for(int j = 1; j < col_size; j++){
                if(matrix[i][j] != 0){
                    if(matrix[i][0] == 0 || matrix[0][j] == 0){
                        matrix[i][j] = 0;
                    }                    
                }
            }
        }
        if(matrix[0][0] == 0){
            for(int j = 0; j < col_size; j++){ 
                matrix[0][j] = 0;            
            }
        }
        if(col0 == 0){
            for(int i = 0; i < row_size; i++){
                matrix[i][0] = 0;   
            }
        }
    }
};
int main(){
    int n, m;
    cout<<"Enter row size : "<<endl;
    cin>>n;
    cout<<"Enter col size : "<<endl;
    cin>>m;
    
    vector<vector<int>> matrix(n,vector<int>(m));
    cout<<"Enter the matrix : "endl; 
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            cin>>matrix[i][j];
        }
    }
    vector<vector<int>> ans = setZeros(matrix);

    for(auto it : ans){
        for(auto ele : it){
            cout<<ele<<" ";
         }
         cout<<endl;
     }
     return 0;
}
 
