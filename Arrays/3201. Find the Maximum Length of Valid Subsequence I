************************************************************
Problem Description : (Leetcode Medium)
************************************************************
You are given an integer array nums.
A subsequence sub of nums with length x is called valid if it satisfies:
        (sub[0] + sub[1]) % 2 == (sub[1] + sub[2]) % 2 == ... == (sub[x - 2] + sub[x - 1]) % 2.
Return the length of the longest valid subsequence of nums.
A subsequence is an array that can be derived from another array by deleting some or no elements without changing the 
order of the remaining elements.

Example 1:
Input: nums = [1,2,3,4]
Output: 4
Explanation:
The longest valid subsequence is [1, 2, 3, 4].

Example 2:
Input: nums = [1,2,1,1,2,1,2]
Output: 6
Explanation:
The longest valid subsequence is [1, 2, 1, 2, 1, 2].

Example 3:
Input: nums = [1,3]
Output: 2
Explanation:
The longest valid subsequence is [1, 3].

Constraints:
2 <= nums.length <= 2 * 10^5
1 <= nums[i] <= 10^7

*********************************************************************
Solution : (Time Complexity :- O(n), Space Complexity :- O(1))
*********************************************************************

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int maximumLength(vector<int>& nums) {
        int n = nums.size();
        int evenCount = 0, oddCount = 0;
        
        for(int &i : nums){
            if (i % 2 == 0){
                evenCount++;
            }else {
                oddCount++;
            }
        }

        int Parity = nums[0] % 2;
        int alterCount = 1;

        for(int i = 1; i < n; i++){
            int currParity = nums[i] % 2;
            if(currParity != Parity){
                alterCount++;
                Parity =currParity;
            }
        }
        return max({evenCount, oddCount, alterCount});
    }
};

int main(){
    int n;
    cout << "Enter the value of n : ";
    cin >> n;
    
    vector<int> nums(n);
    cout << "Enter the elements of nums array : ";
    for(int i = 0; i < n; i++){
        cin >> nums[i];
    }
    Solution* obj = new Solution();
    cout << "Maximum length : " << obj->maximumLength(nums);
    
    delete obj;
    
    return 0;
}
