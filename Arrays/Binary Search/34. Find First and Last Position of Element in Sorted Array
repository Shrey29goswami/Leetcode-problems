***************************************************
Problem Description : (Leetcode Medium)
***************************************************
34. Find First and Last Position of Element in Sorted Array
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given 
target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]
 
Constraints:
0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9
nums is a non-decreasing array.
-10^9 <= target <= 10^9

**********************************************************************
Solution : (Time Complexity : O(log n) , Space Complexity : O(1))
**********************************************************************
#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    int binarySearch(vector<int>& nums, int target, bool flag) {
        int head = 0;
        int tail = nums.size();
        while (head < tail) {
            int mid = (head + tail) / 2;
            if (nums[mid] > target || (flag && target == nums[mid])) {
                tail = mid;
            } else {
                head = mid + 1;
            }
        }
        return head;
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
        int headIdx = binarySearch(nums, target, true);
        if (headIdx == nums.size() || nums[headIdx] != target) {
            return {-1, -1};
        }
        return {headIdx, binarySearch(nums, target, false) - 1};
    }
};

int main()
{
    int n;
    cout << "Enter the size of the array : ";
    cin >> n;
    
    vector<int> nums(n);
    cout << "Enter the elements of the array : "<<endl;
    for(int i = 0; i < n; i++){
        cin >> nums[i];
    }
    int target;
    cout << "Enter the value of target : ";
    cin >> target;
    
    Solution ob;;
    vector<int> ans = ob.searchRange(nums, target);
    for(int c : ans){
        cout << c << " ";
    }

    return 0;
}
