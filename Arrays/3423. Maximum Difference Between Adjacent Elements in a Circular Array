Problem Statement :- (Leetcode Easy)
+++++++++++++++++++++++++++++++++++++
Given a circular array nums, find the maximum absolute difference between adjacent elements.
Note: In a circular array, the first and last elements are adjacent.

Example 1:
Input: nums = [1,2,4]
Output: 3
Explanation:
Because nums is circular, nums[0] and nums[2] are adjacent. They have the maximum absolute difference of |4 - 1| = 3.

Example 2:
Input: nums = [-5,-10,-5]
Output: 5
Explanation:
The adjacent elements nums[0] and nums[1] have the maximum absolute difference of |-5 - (-10)| = 5.

Solution :- (Time Complexity : O(n), Space Complexity : O(1))
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include<iostream>
#include<vector>
#include<limits.h>
using namespace std;

class Solution {
public:
    int maxAdjacentDistance(vector<int>& nums) {
        int cir_diff = abs(nums[0] - nums[nums.size()-1]);

        int diff = INT_MIN, max_diff = INT_MIN;
        for(int i = 1; i < nums.size(); i++){
            diff = abs(nums[i] - nums[i-1]);
            max_diff = max(max_diff, max(cir_diff, diff));
        }
        return max_diff;
    }
};

int main()
{
    int n;
    cout<<"Enter the value of n : "<<endl;
    cin>>n;
    
    vector<int> nums(n);
    cout<<"Enter the nums array of size n :"<<endl;
 
    for(int i  = 0; i < n; i++){
        cin>>nums[i];
    }
    
    Solution* obj = new Solution();
    cout<<"Maximum Difference : "<<obj->maxAdjacentDistance(nums);
    return 0;
}

