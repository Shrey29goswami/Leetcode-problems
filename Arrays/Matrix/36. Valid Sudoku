*****************************************************
Problem Description : (Leetcode Medium)
*****************************************************
36. Valid Sudoku
Companies : Amazon Microsoft Uber Cruise Automation Apple

Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the 
following rules:
   -> Each row must contain the digits 1-9 without repetition.
   -> Each column must contain the digits 1-9 without repetition.
   -> Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:
A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 
Example 1:
Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true

Example 2:
Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's 
in the top left 3x3 sub-box, it is invalid.
 
Constraints:
board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.

*******************************************************************
Solution : (Time Complexity : O(n*n), Space Complexity : O(n))
*******************************************************************
#include <iostream>
#include <vector>
#include <unordered_set>
using namespace std;

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        
         //column check
        for(int i = 0; i < 9; i++){
            unordered_set<char> colCheck;
            for(int j = 0; j < 9; j++){
                char ch = board[i][j];
                if(ch == '.') continue;
                if(colCheck.count(ch)){
                    return false;
                }
                colCheck.insert(ch);
               
            }
        }

         //row check
        for(int j = 0; j < 9; j++){
            unordered_set<char> rowCheck;
            for(int i = 0; i < 9; i++){
                char ch = board[i][j];
                if(ch == '.') continue;
                if(rowCheck.count(ch)){
                    return false;
                }
                rowCheck.insert(ch);
               
            }
        }

        //sub matrix check
        for(int SubRow = 0; SubRow < 3; SubRow++){
            for(int SubCol = 0; SubCol < 3; SubCol++){

                unordered_set<char> subMatCheck;

                for(int i = 0; i < 3; i++){
                    for(int j = 0; j < 3; j++){
                        char ch = board[SubRow * 3 + i][SubCol * 3 + j];
                        if(ch == '.') continue;
                        if(subMatCheck.count(ch)){
                            return false;
                        }
                        subMatCheck.insert(ch);
                    }
                }
            }
        }

        return true;
    }
};

int main()
{
    int n;
    cout << "Enter the value of n : ";
    cin >> n ;
    
    vector<vector<char>> board(n, vector<char>(n));
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            cin >> board[i][j];
        }
    }
    
    Solution obj;
    if(obj.isValidSudoku(board)){
        cout << "Valid" ;
    }else{
        cout << "Invalid";
    }

    return 0;
}
