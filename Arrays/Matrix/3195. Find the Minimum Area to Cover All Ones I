*******************************************************************
Problem Description : (Leetcode Medium)
*******************************************************************
3195. Find the Minimum Area to Cover All Ones I

You are given a 2D binary array grid. Find a rectangle with horizontal and vertical sides with the smallest area, 
such that all the 1's in grid lie inside this rectangle.

Return the minimum possible area of the rectangle.

Example 1:
Input: grid = [[0,1,0],[1,0,1]]
Output: 6
Explanation:
The smallest rectangle has a height of 2 and a width of 3, so it has an area of 2 * 3 = 6.

Example 2:
Input: grid = [[1,0],[0,0]]
Output: 1
Explanation:
The smallest rectangle has both height and width 1, so its area is 1 * 1 = 1.

Constraints:
1 <= grid.length, grid[i].length <= 1000
grid[i][j] is either 0 or 1.
The input is generated such that there is at least one 1 in grid.

*******************************************************************
Solution : (Time Complexity : O(n*m), Space complexity : O(1))
*******************************************************************

#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    int minimumArea(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();

        int first_row = n, last_row = 0;
        int first_col = m, last_col = 0;

        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(grid[i][j] == 1){
                    first_row = min(first_row, i);
                    first_col = min(first_col, j);

                    last_row = max(last_row, i);
                    last_col = max(last_col, j);
                }
            }
        }
      
      
        int area = (last_row + 1 - first_row) * (last_col + 1 - first_col);
        return area;

    }
};
int main()
{
    int n, m;
    cout << "Enter the value of n , m : ";
    cin >> n >> m;
    
    vector<vector<int>> grid(n, vector<int>(m));
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            cin >> grid[i][j];
        }
    }
    Solution s;
    cout << "Area that covers all the ONE's : "<< s.minimumArea(grid);
    

    return 0;
}
