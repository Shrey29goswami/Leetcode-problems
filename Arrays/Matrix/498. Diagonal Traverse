*********************************************
Problem Description : (Leetcode Medium)
*********************************************
498. Diagonal Traverse
Companies : Facebook Microsoft Google

Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.
Example 1:
Input: mat = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,4,7,5,3,6,8,9]

Example 2:
Input: mat = [[1,2],[3,4]]
Output: [1,2,3,4]
 
Constraints:
m == mat.length
n == mat[i].length
1 <= m, n <= 10^4
1 <= m * n <= 10^4
-10^5 <= mat[i][j] <= 10^5

*****************************************************************
Solution : (Time Complexity : O(n*n), Space Complexity : O(n))
*****************************************************************
class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& mat) {
        int m = mat.size(), n = mat[0].size();

        map<int, vector<int>> mp;
        vector<int> ans;

        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                mp[i+j].push_back(mat[i][j]);
            }
        }

        bool flip = true;
        for(auto& it : mp){
            if(flip){
                reverse(it.second.begin(), it.second.end());
            }
            for(int& num : it.second){
                ans.push_back(num);
            }
            flip = !flip;
        }
        return ans;
    }
};
