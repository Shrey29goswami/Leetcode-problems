************************************************************
Problem Description : (Leetcode Easy)
************************************************************
206. Reverse Linked List
Companies : Amazon Microsoft Apple Bloomberg Facebook

Given the head of a singly linked list, reverse the list, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Example 2:
Input: head = [1,2]
Output: [2,1]

Example 3:
Input: head = []
Output: []
 
Constraints:
The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000

*****************************************************************
Solution : (Time Complexity :- O(n), Space Complexity :- O(1))
*****************************************************************

#include <iostream>
using namespace std;


struct ListNode {
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
 };
class Solution {
public:
    ListNode* head;
    Solution(){
        head = nullptr;
    }
    
    void insert(int v){
        ListNode* newNode = new ListNode(v);
        if(!head){
            head = newNode;
        }else{
            ListNode* temp = head;
            while(temp->next != nullptr){
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }
    
    ListNode* reverseList(ListNode* head) {
        ListNode* prev = nullptr, *curr = head, *temp = nullptr;
        
        while(curr != nullptr){
            temp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;

    }
};
int main(){
    int n;
    cout << "Enter the value of n : ";
    cin >> n;
    
    
    Solution obj;
    for(int i = 0; i < n; i++){
        int id;
        cin >> id;
        obj.insert(id);
    }
    ListNode* temp = obj.reverseList(obj.head);
    while(temp != nullptr){
        cout << temp->val;
        if(temp->next != nullptr){
            cout <<" -> ";
        }
        temp = temp->next;
    }
    
    return 0;
}
