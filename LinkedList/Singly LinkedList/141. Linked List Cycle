************************************************************************
Problem Description : (Leetcode Easy)
************************************************************************
141. Linked List Cycle

Companies : Amazon Spotify Microsoft Oracle Visa

Given head, the head of a linked list, determine if the linked list has a cycle in it.
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following 
the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. 
Note that pos is not passed as a parameter.
Return true if there is a cycle in the linked list. Otherwise, return false.

Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

Example 2:
Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.

Example 3:
Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.
 

Constraints:
The number of the nodes in the list is in the range [0, 10^4].
-10^5 <= Node.val <= 10^5
pos is -1 or a valid index in the linked-list.

************************************************************************
Solution : (Time Complexity :- O(n), Space Complexity :- O(1))
************************************************************************

#include <iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
 };
 
class Solution {
public:
    ListNode* head;
    Solution(){
        head = nullptr;
    }
    void insert(int val){
        ListNode* newNode = new ListNode(val);
        if(!head){
            head = newNode;
        }else{
            ListNode* temp = head;
            while(temp->next != nullptr){
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }
    bool hasCycle(ListNode *head) {
        if(!head || head->next == nullptr){
            return false;
        }
        ListNode* s = head;
        ListNode* f = head->next;
        while(s != f){
            if(f->next == nullptr || f->next->next == nullptr){
                return false;
            }
            s = s->next;
            f = f->next->next;
        }
        return true;
        
    }
};
int main(){
    int n;
    cout << "Enter the value of n : ";
    cin >> n;
    
    
    Solution obj;
    for(int i = 0; i < n; i++){
        int id;
        cin >> id;
        obj.insert(id);
    }

    cout << "Enter the position to form cycle (-1 for no cycle): ";
    int pos;
    cin >> pos;

    if(pos != -1){
        ListNode* tail = obj.head;
        ListNode* cycleNode = nullptr;
        int idx = 0;

        while(tail->next != nullptr){
            if(idx == pos) cycleNode = tail;
            tail = tail->next;
            idx++;
        }
        if(idx == pos) cycleNode = tail;
        tail->next = cycleNode;
    }
    
    if(obj.hasCycle(obj.head)){
        cout << " Linked List has Cycle.";
    }else{
        cout << " Linked List doesn't has Cycle.";
    }
    
    
    return 0;
}
