**********************************************
Problem Description : (Leetcode Medium)
**********************************************
You are given an integer eventTime denoting the duration of an event, where the event occurs from time t = 0 to time t = eventTime.

You are also given two integer arrays startTime and endTime, each of length n. These represent the start and end time of n non-overlapping meetings, where the ith 
meeting occurs during the time [startTime[i], endTime[i]].
You can reschedule at most k meetings by moving their start time while maintaining the same duration, to maximize the longest continuous period of free time during the 
event.
The relative order of all the meetings should stay the same and they should remain non-overlapping.
Return the maximum amount of free time possible after rearranging the meetings.

Note that the meetings can not be rescheduled to a time outside the event.

Example 1:
Input: eventTime = 5, k = 1, startTime = [1,3], endTime = [2,5]
Output: 2
Explanation:
Reschedule the meeting at [1, 2] to [2, 3], leaving no meetings during the time [0, 2].

Example 2:
Input: eventTime = 10, k = 1, startTime = [0,2,9], endTime = [1,4,10]
Output: 6
Explanation:
Reschedule the meeting at [2, 4] to [1, 3], leaving no meetings during the time [3, 9].

Example 3:
Input: eventTime = 5, k = 2, startTime = [0,1,2,3,4], endTime = [1,2,3,4,5]
Output: 0
Explanation:
There is no time during the event not occupied by meetings.

Constraints:
1 <= eventTime <= 10^9
n == startTime.length == endTime.length
2 <= n <= 10^5
1 <= k <= n
0 <= startTime[i] < endTime[i] <= eventTime
endTime[i] <= startTime[i + 1] where i lies in the range [0, n - 2].


**************************************************************************************
Solution : (Time Complexity :- O(n), Space Complexity :- O(n))
**************************************************************************************


#include<iostream>
#include<vector>

using namespace std;

class Solution {
public:
    int maxFreeTime(int eventTime, int k, vector<int>& startTime, vector<int>& endTime) {
        
        vector<int> free;
        free.push_back(startTime[0]);

        for(int i = 1; i < endTime.size(); i++){
            free.push_back(startTime[i] - endTime[i-1]);   
        }
        
        free.push_back(eventTime - endTime[endTime.size()-1]);

        int j = 0, i = 0;
        int sum = 0, max_sum = 0;
        int n = free.size();

        while(j < n){
            sum += free[j];
            if(i < n && j-i+1 > k+1){
                sum -= free[i];
                i++;
                
            }
            max_sum = max(max_sum , sum);
            j++;

        }

        return max_sum;
    }
};

int main()
{
    int eventTime, k;
    cout<<"Enter the total eventTime : ";
    cin>>eventTime;
    
    cout<<"Enter the no. of times to reschedule : ";
    cin >> k;
    
    int n;
    cout<<"Enter the size of the array : ";
    cin >>n;
    
    vector<int> start(n);
    vector<int> end(n);
    
    cout<< "Enter the elements of start array : ";
    for(int i = 0; i < n; i++){
        cin >> start[i];
    }
    
    cout<< "Enter the elements of end array : ";
    for(int i = 0; i < n; i++){
        cin >> end[i];
    }
    
    Solution obj;
    cout<<"Maximum Free Time after Rescheduling Meetings : ";
    cout<<obj.maxFreeTime(eventTime, k, start, end);
    
    
    return 0;
}
