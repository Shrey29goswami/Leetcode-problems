******************************************
Problem Description : (Leetcode Medium)
******************************************
You are given an array of integers nums and an integer target.
Return the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less 
or equal to target. Since the answer may be too large, return it modulo 109 + 7.

Example 1:
Input: nums = [3,5,6,7], target = 9
Output: 4
Explanation: There are 4 subsequences that satisfy the condition.
[3] -> Min value + max value <= target (3 + 3 <= 9)
[3,5] -> (3 + 5 <= 9)
[3,5,6] -> (3 + 6 <= 9)
[3,6] -> (3 + 6 <= 9)

Example 2:
Input: nums = [3,3,6,8], target = 10
Output: 6
Explanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).
[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]

Example 3:
Input: nums = [2,3,3,4,6,7], target = 12
Output: 61
Explanation: There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]).
Number of valid subsequences (63 - 2 = 61).
 
Constraints:
1 <= nums.length <= 10^5
1 <= nums[i] <= 10^6
1 <= target <= 10^6

*********************************************************************************
Solution : (Time Complexity :- O(nlog(n)), Space Complexity :- O(n))
**********************************************************************************

#include <bits/stdc++.h>
using namespace std;

const int M = 1e9 + 7;
class Solution {
public:
    int numSubseq(vector<int>& nums, int target) {
        int n = nums.size();
        //1. Sort
        sort(begin(nums), end(nums));
        vector<int> p(n);
        p[0] = 1;
        for(int i = 1; i < n; i++){
            p[i] = (p[i-1] * 2) % M;
        }
        //2.check and count
        int l = 0, r = n-1, result = 0;
        while(l <= r){
            if(nums[l] + nums[r] <= target){
                int diff = r-l;
                result = (result % M + p[diff]) % M;
                l++;
            }else{
                r--;
            }
        }
        return result;
       

    }
};
int main()
{
    cout<<"Hello World"<<endl;
    int target;
    cout<<"Enter the value of target : ";
    cin>>target;
    
    int n;
    cout<<"Enter the size of array : ";
    cin>>n;
    
    vector<int> nums(n);
    cout<<"Enter the nums array elements : ";
    for(int i = 0; i < n; i++){
        cin>>nums[i];
    }
    
    Solution* obj = new Solution();
    
    cout<<"Number of Subsequences That Satisfy the Given Sum Condition : "<<obj->numSubseq(nums,target);


    return 0;
}
