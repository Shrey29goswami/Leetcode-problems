***************************************************************
Problem Description : (Leetcode Medium)
***************************************************************
You are given two integer arrays nums1 and nums2. You are tasked to implement a data structure that supports queries of 
two types:
      * Add a positive integer to an element of a given index in the array nums2.
      * Count the number of pairs (i, j) such that nums1[i] + nums2[j] equals a given value (0 <= i < nums1.length 
        and 0 <= j < nums2.length).
      * Implement the FindSumPairs class:-
           * FindSumPairs(int[] nums1, int[] nums2) Initializes the FindSumPairs object with two integer arrays nums1 and 
             nums2.
           * void add(int index, int val) Adds val to nums2[index], i.e., apply nums2[index] += val.
           * int count(int tot) Returns the number of pairs (i, j) such that nums1[i] + nums2[j] == tot.
Example 1:
Input :-
["FindSumPairs", "count", "add", "count", "count", "add", "add", "count"]
[[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]
Output :- 
[null, 8, null, 2, 1, null, null, 11]

Explanation :-
FindSumPairs findSumPairs = new FindSumPairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]);
findSumPairs.count(7);  // return 8; pairs (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) make 2 + 5 and pairs (5,1), (5,5) make 3 + 4
findSumPairs.add(3, 2); // now nums2 = [1,4,5,4,5,4]
findSumPairs.count(8);  // return 2; pairs (5,2), (5,4) make 3 + 5
findSumPairs.count(4);  // return 1; pair (5,0) makes 3 + 1
findSumPairs.add(0, 1); // now nums2 = [2,4,5,4,5,4]
findSumPairs.add(1, 1); // now nums2 = [2,5,5,4,5,4]
findSumPairs.count(7);  // return 11; pairs (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) make 2 + 5 and pairs (5,3), (5,5) make 3 + 4
 
Constraints:
1 <= nums1.length <= 1000
1 <= nums2.length <= 10^5
1 <= nums1[i] <= 10^9
1 <= nums2[i] <= 10^5
0 <= index < nums2.length
1 <= val <= 10^5
1 <= tot <= 10^9
At most 1000 calls are made to add and count each.

******************************************************************************************************************
Solution : (Time Complexity :- O(n), Space Complexity :- O(n + m)), where n - size of array, m - size of the map
******************************************************************************************************************
#include <iostream>
#include <vector>
#include<unordered_map>
using namespace std;

class FindSumPairs {
public:

    vector<int> arr1, arr2;
    unordered_map<int, int> mp;

    FindSumPairs(vector<int>& nums1, vector<int>& nums2) {
        arr1 = nums1;
        arr2 = nums2;

        for(int &x : arr2){
            mp[x]++;
        }    
    }
    
    void add(int index, int val) {
        mp[arr2[index]]--;
        arr2[index] += val;
        mp[arr2[index]]++;
        
    }
    
    int count(int tot) {
                
        int count = 0;
        for(int &x : arr1){
            count += mp[tot - x];
            
        }

        return count;
        
    }
};


int main()
{
    int n1, n2;
    cout << "Enter size of nums1: ";
    cin >> n1;
    vector<int> nums1(n1);
    cout << "Enter elements of nums1: ";
    for (int i = 0; i < n1; ++i) cin >> nums1[i];

    cout << "Enter size of nums2: ";
    cin >> n2;
    vector<int> nums2(n2);
    cout << "Enter elements of nums2: ";
    for (int i = 0; i < n2; ++i) cin >> nums2[i];

    FindSumPairs* obj = new FindSumPairs(nums1, nums2);

    int q;
    cout << "Enter number of queries: ";
    cin >> q;

    while (q--) {
        string op;
        cout << "Enter operation (add / count): ";
        cin >> op;

        if (op == "add") {
            int index, val;
            cout << "Enter index and value to add: ";
            cin >> index >> val;
            obj->add(index, val);
            cout << "Add operation completed.\n";
        } else if (op == "count") {
            int tot;
            cout << "Enter total to count: ";
            cin >> tot;
            int result = obj->count(tot);
            cout << "Count result: " << result << "\n";
        } else {
            cout << "Unknown operation.\n";
        }
    }

    delete obj;
    return 0;
    return 0;
}
