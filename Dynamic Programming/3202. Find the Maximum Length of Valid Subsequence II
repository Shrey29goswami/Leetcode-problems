******************************************************************************
Problem Description : (Leetcode Medium)
*******************************************************************************

You are given an integer array nums and a positive integer k.
A subsequence sub of nums with length x is called valid if it satisfies:
           (sub[0] + sub[1]) % k == (sub[1] + sub[2]) % k == ... == (sub[x - 2] + sub[x - 1]) % k.
Return the length of the longest valid subsequence of nums.

Example 1:
Input: nums = [1,2,3,4,5], k = 2
Output: 5
Explanation:
The longest valid subsequence is [1, 2, 3, 4, 5].

Example 2:
Input: nums = [1,4,2,3,1,4], k = 3
Output: 4
Explanation:
The longest valid subsequence is [1, 4, 1, 4].

Constraints:
2 <= nums.length <= 10^3
1 <= nums[i] <= 10^7
1 <= k <= 10^3

******************************************************************************
Solution : (Time Complexity :- O(n^2), Space Complexity :- O(n^2))
*******************************************************************************
#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    int maximumLength(vector<int>& nums, int k) {
        int n = nums.size();

        vector<vector<int>> dp(k, vector<int> (n, 1));

        int maxSum = 1;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < i; j++){
                int mod = (nums[i] + nums[j]) % k;
                dp[mod][i] = max(dp[mod][i] , 1 + dp[mod][j]);
                maxSum = max(maxSum, dp[mod][i]);
            }
        }

        return maxSum;
    }
};
int main(){
    
    int n, k;
    
    cout << "Enter the value of n : ";
    cin >> n;
    
    cout << "Enter the value of k : ";
    cin >> k;
    
    vector<int> nums(n);
    cout << "Enter the nums array elements : ";
    for(int i = 0; i < n; i++){
        cin >> nums[i];
    }
    
    Solution obj;
    cout << "Maximum Length : " << obj.maximumLength(nums, k);
    delete obj;

    return 0;
}
