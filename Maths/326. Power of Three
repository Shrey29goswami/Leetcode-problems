****************************************
Problem Description : (Leetcode Easy)
****************************************
326. Power of Three
Companies : Amazon

Given an integer n, return true if it is a power of three. Otherwise, return false.
An integer n is a power of three, if there exists an integer x such that n == 3x.

Example 1:
Input: n = 27
Output: true
Explanation: 27 = 33

Example 2:
Input: n = 0
Output: false
Explanation: There is no x where 3x = 0.

Example 3:
Input: n = -1
Output: false
Explanation: There is no x where 3x = (-1).

Constraints:
-2^31 <= n <= 2^31 - 1
 
Follow up: Could you solve it without loops/recursion?

*******************************************************************
Solution : (Time Complexity : O(log n) , Space Complexity : O(1))
*******************************************************************


#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    bool isPowerOfThree(int n) {
        if(n <= 0) return false;
        
        while(n!=1){
            if(n % 3 != 0)
                return false;
            n = n/3;    
        }
        return true;
        //return n > 0 && 1162261467 % n == 0;
    }
};

int main()
{
    int n;
    cout << "Enter the value of n : ";
    cin >> n;
    
    Solution obj;
    if(obj.isPowerOfThree(n)){
        cout << "Yes, it is the power of three.";
    }else{
        cout << "No, it is not the power of three.";
    }

    return 0;
}
