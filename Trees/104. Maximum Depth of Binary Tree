*************************************************************************
Problem Description : (Leetcode Easy)
*************************************************************************
104. Maximum Depth of Binary Tree
Companies : LinkedIn Amazon Spotify Google Microsoft

Given the root of a binary tree, return its maximum depth.
A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: 3

Example 2:
Input: root = [1,null,2]
Output: 2
 
Constraints:
The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100

*************************************************************************
Solution : (Time Complexity :- O(n), Space Complexity :- O(h))
*************************************************************************
#include <iostream>
#include <vector>
#include <queue>
#include <string>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    int maxDepth(TreeNode* root) {
        if (root == nullptr) return 0;
        int l = maxDepth(root->left);
        int r = maxDepth(root->right);
        return 1 + max(l, r);
    }
};

// Helper function to convert vector of strings into a binary tree
TreeNode* insertLevelOrder(const vector<string>& nodes) {
    if (nodes.empty() || nodes[0] == "null") return nullptr;

    TreeNode* root = new TreeNode(stoi(nodes[0]));
    queue<TreeNode*> q;
    q.push(root);

    int i = 1;
    while (i < nodes.size()) {
        TreeNode* curr = q.front(); q.pop();

        // Left child
        if (i < nodes.size() && nodes[i] != "null") {
            curr->left = new TreeNode(stoi(nodes[i]));
            q.push(curr->left);
        }
        i++;

        // Right child
        if (i < nodes.size() && nodes[i] != "null") {
            curr->right = new TreeNode(stoi(nodes[i]));
            q.push(curr->right);
        }
        i++;
    }
    return root;
}

int main() {
    int n;
    cout << "Enter number of nodes: ";
    cin >> n;

    vector<string> arr(n);
    cout << "Enter the nodes (use \"null\" for empty nodes): ";
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }

    TreeNode* root = insertLevelOrder(arr);
    Solution sol;
    int depth = sol.maxDepth(root);

    cout << "Maximum Depth of Tree: " << depth << endl;
    return 0;
}

