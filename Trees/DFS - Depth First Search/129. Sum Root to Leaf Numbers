********************************************************
Problem Description : Leetcode Medium
********************************************************
129. Sum Root to Leaf Numbers
Companies : Facebook Microsoft Amazon

You are given the root of a binary tree containing digits from 0 to 9 only.
Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.

Example 1:
Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.

Example 2:
Input: root = [4,9,0,5,1]
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.
 
Constraints:
The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 9
The depth of the tree will not exceed 10.

**************************************************************
Solution : (Time Complexity : O(n), Space Complexity : O(n))
**************************************************************
#include <iostream>
#include <vector>
#include <queue>
using namespace std;


struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:
    TreeNode* buildTree(vector<int> &nums){
        if(nums.empty()){
            return nullptr;
        }
        TreeNode* root = new TreeNode(nums[0]);
        queue<TreeNode*> q;
        q.push(root);
        
        size_t i = 1;
        while(i < nums.size()){
            TreeNode* temp = q.front();
            q.pop();
            
            if(i < nums.size()){
                temp->left = new TreeNode(nums[i]);
                q.push(temp->left);
            }
            i++;
            
            if(i < nums.size()){
                temp->right = new TreeNode(nums[i]);
                q.push(temp->right);
            }
            i++;
        }
        return root;
    }
    //function to calculate sum
    int sumNumbers(TreeNode* root) {

        if(!root) return 0;
        return dfs(root, 0);
        
    }
    //dfs function
    int dfs(TreeNode* node, int curr) {
        if (!node) return 0;

        curr = curr * 10 + node->val;

        // if it's a leaf, return the number formed
        if (!node->left && !node->right) {
            return curr;
        }

        // sum of left and right subtrees
        return dfs(node->left, curr) + dfs(node->right, curr);
    }
};

int main()
{
    int n;
    cout << "Enter the value of n : ";
    cin >> n;
    
    Solution obj;
    vector<int> nums(n);
    for(int i = 0; i < n; i++){
        cin >> nums[i];
    }
    TreeNode* root = obj.buildTree(nums);
    cout <<"Sum of all the root to leaf paths : " << obj.sumNumbers(root);

    return 0;
}
