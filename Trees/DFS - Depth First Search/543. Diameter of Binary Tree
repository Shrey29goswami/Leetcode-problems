***********************************************************************
Problem Description : (LeetCode Easy)
***********************************************************************
543. Diameter of Binary Tree
Companies : Facebook Amazon Bloomberg Google Microsoft.

Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or 
may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.

Example 1:
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].

Example 2:
Input: root = [1,2]
Output: 1

Constraints:
The number of nodes in the tree is in the range [1, 10^4].
-100 <= Node.val <= 100

***********************************************************************
Solution : (Time Complexity :- O(n), Space Complexity :- O(1))
***********************************************************************

#include <iostream>
#include <vector>
#include <unordered_set>
#include <climits>
#include <queue>
using namespace std;

struct TreeNode{
    int data;
    TreeNode* left, *right;
    TreeNode(int val) : data(val), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    int diameter = 0;
    
    TreeNode* buildRoot(vector<int>& nums){
        if(nums.empty()){
            return nullptr;
        }
        TreeNode* root = new TreeNode(nums[0]);
        queue<TreeNode*> q;
        q.push(root);
        
        size_t i = 1;
        while(i < nums.size()){
            TreeNode* temp = q.front();
            q.pop();
            
            if(i < nums.size()){
                temp->left = new TreeNode(nums[i]);
                q.push(temp->left);
            }
            i++;
            
            if(i < nums.size()){
                temp->right = new TreeNode(nums[i]);
                q.push(temp->right);
            }
            i++;
        }
        return root;
    }
    int dfs(TreeNode* root){
        if(root == nullptr){
            return 0;
        }
        int left = dfs(root->left);
        int right = dfs(root->right);

        diameter = max(diameter, left + right);

        return max(left, right) + 1;
    }
    
    int diameterOfBinaryTree(TreeNode* root) {
        dfs(root);
        return diameter;
    }
};

int main(){
    
    int n;
    cout <<"Enter the value of n : ";
    cin >> n;
    
    vector<int> nums(n);
    cout << "Enter the nums array : ";
    for(int i = 0; i < n; i++){
        cin >> nums[i];
    }
    
    Solution obj;
    TreeNode* root = obj.buildRoot(nums);
    
    cout << "Maximum Diameter of the Binary Tree : " << obj.diameterOfBinaryTree(root);
   
    return 0;
}
