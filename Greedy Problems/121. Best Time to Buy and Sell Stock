******************************************
Problem Description : (Leetcode Easy)
******************************************
121. Best Time to Buy and Sell Stock
Companies : Amazon Facebook Microsoft Bloomberg Google

You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to 
sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 
Constraints:
1 <= prices.length <= 105
0 <= prices[i] <= 104

************************************************************
Solution : (Time Complexity : O(n); Space Complexity : O(1))
************************************************************
#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.empty()) {
            return 0;
        }
        
        int minPrice = prices[0]; 
        int maxProfit = 0;        
        
        for (int i = 1; i < prices.size(); ++i) {
            // Update the minimum price
            minPrice = min(minPrice, prices[i]);
            
            // Calculate profit if selling on day i
            int currProfit = prices[i] - minPrice;
            
            // Update the maximum profit
            maxProfit = max(maxProfit, currProfit);
        }
        
        return maxProfit;
    }
};
int main()
{
    int n;
    cout << "Enter the size of array : ";
    cin >> n;
    
    vector<int> price(n);
    cout << "Enter the prices array : ";
    for(int i = 0; i < n; i++){
        cin >> price[i];
    }
    
    Solution ob;
    cout << "Maximum profit : "<<ob.maxProfit(price);

    return 0;
}
