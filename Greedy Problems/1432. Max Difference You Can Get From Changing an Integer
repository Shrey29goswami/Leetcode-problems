Problem Description : (Leetcode Medium)
++++++++++++++++++++++++++++++++++++++++
You are given an integer num. You will apply the following steps to num two separate times:
    -> Pick a digit x (0 <= x <= 9).
    -> Pick another digit y (0 <= y <= 9). Note y can be equal to x.
    -> Replace all the occurrences of x in the decimal representation of num by y.
Let a and b be the two results from applying the operation to num independently.
Return the max difference between a and b.

Note that neither a nor b may have any leading zeros, and must not be 0.

Example 1:
Input: num = 555
Output: 888
Explanation: The first time pick x = 5 and y = 9 and store the new integer in a.
The second time pick x = 5 and y = 1 and store the new integer in b.
We have now a = 999 and b = 111 and max difference = 888

Example 2:
Input: num = 9
Output: 8
Explanation: The first time pick x = 9 and y = 9 and store the new integer in a.
The second time pick x = 9 and y = 1 and store the new integer in b.
We have now a = 9 and b = 1 and max difference = 8
 
Constraints:
1 <= num <= 10^8

Solution : (Time Complexity :- O(n), Space Complexity :- O(n))
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include<bits/stdc++.h>
using namespace std;

class Solution {
public:
    int maxDiff(int num) {
    
        string s_a = to_string(num);
        string s_b = s_a;

        int index = s_a.find_first_not_of('9');
        if(index != string::npos){
            char ch = s_a[index];
            replace(begin(s_a), end(s_a), ch, '9');
        }

        
        for(int i = 0; i < s_b.length(); i++){
            char ch = s_b[i];
            if(i == 0){
                if(ch != '1'){
                    replace(begin(s_b),end(s_b), ch, '1');
                    break;
                }
            }
            else if(ch != '0' && ch != s_b[0]){
                replace(begin(s_b), end(s_b), ch, '0');
                break;
                
            }
            

        }
        return stoi(s_a) - stoi(s_b);
    }
};
int main(){
    int num;
    cout<<"Enter the value of num :-"<<endl;
    cin>>num;
    
    Solution* obj = new Solution();
    cout<<"Maximum Difference : "<<obj->maxDiff(num);
    
    return 0;
}
