******************************************************************************
Problem Description : (Leetcode Medium)
******************************************************************************
1717. Maximum Score From Removing Substrings [Google]
You are given a string s and two integers x and y. You can perform two types of operations any number of times.
Remove substring "ab" and gain x points.
For example, when removing "ab" from "cabxbae" it becomes "cxbae".
Remove substring "ba" and gain y points.
For example, when removing "ba" from "cabxbae" it becomes "cabxe".
Return the maximum points you can gain after applying the above operations on s.

Example 1:
Input: s = "cdbcbbaaabab", x = 4, y = 5
Output: 19
Explanation:
- Remove the "ba" underlined in "cdbcbbaaabab". Now, s = "cdbcbbaaab" and 5 points are added to the score.
- Remove the "ab" underlined in "cdbcbbaaab". Now, s = "cdbcbbaa" and 4 points are added to the score.
- Remove the "ba" underlined in "cdbcbbaa". Now, s = "cdbcba" and 5 points are added to the score.
- Remove the "ba" underlined in "cdbcba". Now, s = "cdbc" and 5 points are added to the score.
Total score = 5 + 4 + 5 + 5 = 19.

Example 2:
Input: s = "aabbaaxybbaabb", x = 5, y = 4
Output: 20
 
Constraints:
1 <= s.length <= 10^5
1 <= x, y <= 10^4
s consists of lowercase English letters.

******************************************************************************
Solution : (Time Complexity :- O(n), Space Complexity :- O(n))
******************************************************************************
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
using namespace std;

class Solution {
public:
    int solve(string &s, char a, char b, int points){
        stack<char> st;
        int count = 0;

        for(char ch : s){
            if(!st.empty() && st.top() == a && ch == b){
                st.pop();
                count += points;
            }else{
                st.push(ch);
            }
        }

        string res = "";
        while(!st.empty()){
            res += st.top();
            st.pop();
        }

        reverse(res.begin(), res.end());
        s = res;

        return count;
    }

    int maximumGain(string s, int x, int y) {
        int count = 0;

        if(x > y){
            count += solve(s, 'a', 'b', x);
            count += solve(s, 'b', 'a', y);
        }else{
            count += solve(s, 'b', 'a', y);
            count += solve(s, 'a', 'b', x);
        }

        return count;
    }
};

int main() {
    int x, y;
    cout << "Enter the value of x : ";
    cin >> x;
    
    cout << "Enter the value of y : ";
    cin >> y;
    
    string s;
    cout << "Enter the string s : ";
    cin >> s;
    

    Solution obj;
    cout << "Maximum Gain :- " << obj.maximumGain(s, x, y);

    return 0;
}
